#+title: eid-proto-nat

PROTOTYPE PROTOTYPE PROTOTYPE I AM NOT A CRYPTOGRAPHER

A prototype of a token signing flow. Compared to session TLS, these tokens can be delegated "safely" (without letting the proxy tamper with the information within the token) and stored for later audit logs (after unwrapping the encryption). Compared to JWT, tokens are encrypted and protected from reuse.

The API exposed over a local WebSocket, which it is expected that most clients would connect to from their web browsers. This repo only provides an example CLI relying party, however.

* requirements

- rustup 1.24.0 or newer

* usage

** setup

First, set up a PKI:

#+begin_src bash
openssl genpkey -algorithm ed25519 -out ca.key -outform der
openssl x509 -new -subj /CN=eid-proto-nat-ca -key ca.key -out ca.crt -extfile ca.crt.conf

openssl genpkey -algorithm ed25519 -out user.key -outform der
openssl x509 -new -subj /CN=eid-proto-nat-user -force_pubkey user.key -out user.crt -CA ca.crt -CAkey ca.key -extfile user.crt.conf

openssl genpkey -algorithm ed25519 -out relyingparty.key -outform der
openssl x509 -new -subj /CN=eid-proto-nat-rp -force_pubkey relyingparty.key -out relyingparty.crt -CA ca.crt -CAkey ca.key
#+end_src

** agent

This is the daemon that the user would run in the background:

#+begin_src bash
RUST_LOG=info cargo run -- --key user.key --cert user.crt --ca ca.crt
#+end_src

** relying party

This emulates how a browser session would attempt to log in. In practice, the challenge would be generated by the server,
and proxied by JS running in the browser:

#+begin_src bash
RUST_LOG=info cargo run --bin eid-relying-party-cli -- --key relyingparty.key --cert relyingparty.crt --ca ca.crt
#+end_src

** auto-reload

For ease of development, the [[https://github.com/watchexec/cargo-watch][cargo-watch]] can be used to automatically restart the daemons whenever the source code is modified:

#+begin_src bash
RUST_LOG=info cargo watch -x "run -- --key user.key --cert user.crt --ca ca.crt"
RUST_LOG=info cargo watch -x "run --bin eid-relying-party-cli -- --key relyingparty.key --cert relyingparty.crt --ca ca.crt"
#+end_src
